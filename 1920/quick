#include<stdio.h>
#include <stdlib.h>
int Ejin(int a, int ab[], int s, int e)
{
	int m = (s + e) / 2;
	if (s == m || m == e)
	{
		if (a == ab[m])
		{
			return 1;
		}
		return 0;
	}
	if (ab[m] == a)
	{
		return 1;
	}
	else if (ab[m] < a)
	{
		Ejin(a, ab, m, e);
	}
	else if(ab[m]>a)
	{
		Ejin(a, ab, s, m);
	}
}
void Swap(int arr[], int a, int b) // a,b 스왑 함수 
{
	int temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}
int Partition(int arr[], int left, int right)
{
	int pivot = arr[left]; // 피벗의 위치는 가장 왼쪽에서 시작
	int low = left + 1;
	int high = right;

	while (low <= high) // 교차되기 전까지 반복한다 
	{
		while (low <= right && pivot >= arr[low]) // 피벗보다 큰 값을 찾는 과정 
		{
			low++; // low를 오른쪽으로 이동 
		}
		while (high >= (left + 1) && pivot <= arr[high]) // 피벗보다 작은 값을 찾는 과정 
		{
			high--; // high를 왼쪽으로 이동
		}
		if (low <= high)// 교차되지 않은 상태이면 스왑 과정 실행 
		{
			Swap(arr, low, high); //low와 high를 스왑 
		}
	}
	Swap(arr, left, high); // 피벗과 high가 가리키는 대상을 교환 
	return high;  // 옮겨진 피벗의 위치정보를 반환 

}


void QuickSort(int arr[], int left, int right)
{
	if (left <= right)
	{
		int pivot = Partition(arr, left, right); // 둘로 나누어서
		QuickSort(arr, left, pivot - 1); // 왼쪽 영역을 정렬한다.
		QuickSort(arr, pivot + 1, right); // 오른쪽 영역을 정렬한다.
	}
}
int main(void)
{
	int a;
	int ab[100000] = { 0, };
	scanf("%d", &a);
	for (int i = 0; i < a; i++)
	{
		scanf("%d", &ab[i]);
	}


	int b;
	int bb[100000] = { 0, };
	scanf("%d", &b);
	for (int i = 0; i < b; i++)
	{
		scanf("%d", &bb[i]);
	}
	QuickSort(ab, 0, a - 1);

	for (int i = 0; i < b; i++)
	{
		int z = Ejin(bb[i], ab, 0, a);
		printf("%d\n",z );
	}

}
